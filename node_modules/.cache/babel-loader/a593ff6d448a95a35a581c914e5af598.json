{"ast":null,"code":"var _jsxFileName = \"/Users/wanegong/Desktop/another frontend/face-recognition/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Rank from \"./components/Rank/Rank\";\nimport Particles from \"react-particles-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: \"b245f7327c72491f83ffec3cdbfffb85\"\n});\nconst particlesOptions = {\n  particles: {\n    number: 30,\n    density: {\n      enable: true,\n      value_area: 800\n    }\n  }\n}; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <Particles className=\"particles\" params={particlesOptions} />\n//       <Navigation />\n//       <Logo />\n//       <Rank />\n//       <ImageLinkForm />\n//       {/* <FaceRecognition /> */}\n//     </div>\n//   );\n// }\n// 就我理解，需要使用到state这个属性必须要有constructor方法，即要通过class来声明\n\nclass App extends Component {\n  constructor() {\n    // 要使用this必须要先使用super\n    super(); // 设定state，可以让子组件和父组件进行数据互动，有点类似于闭包\n\n    this.onInputChange = event => {\n      console.log(event.target.value); //调用 事件对象.target.value可以获得输入input的值\n      // 调用这个继承自Component的方法来进行设定属性，不要通过 this.state.urlInput来设置值\n      // 传入参数为一个对象\n\n      this.setState({\n        urlInput: event.target.value\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\"bounding_box\"];\n      return {\n        // 因为想在inset里面使用百分比，所以在这里先乘以100，再进行返回\n        top: clarifaiFace.top_row * 100,\n        left: clarifaiFace.left_col * 100,\n        right: clarifaiFace.bottom_row * 100,\n        bottom: clarifaiFace.right_col * 100\n      };\n    };\n\n    this.displayFaceFrame = faceFrame => {\n      this.setState({\n        faceFrame: faceFrame\n      }); // 可以简单写法\n      // this.setState({ faceFrame })\n    };\n\n    this.getConcepts = data => {\n      const concepts = data[\"outputs\"][0][\"data\"][\"regions\"][0][\"data\"][\"concepts\"][0];\n      this.setState({\n        concepts: concepts\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      console.log(\"click\"); // 当点击按钮的时候和clarifai的api做交流\n      // 当点击按钮时改变State中imageUrl的值,这个值为输入的url的值\n\n      this.setState({\n        imageUrl: this.state.urlInput\n      });\n      app.models.initModel({\n        id: Clarifai.FACE_DETECT_MODEL // version: \"53e1df302c079b3db8a0a36033ed2d15\",\n\n      }).then(generalModel => {\n        return generalModel.predict(this.state.urlInput);\n      }).then(response => {\n        // 把这一串拿走当作一个方法会比较符合面向对象的语言（我猜）\n        // var concepts =\n        //   response[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\n        //     \"bounding_box\"\n        //   ];\n        this.getConcepts(response);\n        console.log(this.getConcepts(response));\n        console.log(response[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\"bounding_box\"]);\n        console.log(this.calculateFaceLocation(response));\n        return this.calculateFaceLocation(response);\n      }).then(faceLocation => {\n        this.displayFaceFrame(faceLocation);\n      }).catch(err => {\n        console.log(\"There are some errors\", err);\n      });\n    };\n\n    this.state = {\n      urlInput: \"\",\n      imageUrl: \"\",\n      faceFrame: {},\n      concepts: {}\n    };\n  } // 利用箭头函数解决this的指向问题\n  // 设置这个方法是为了改变state里面属性的值，子组件不能直接修改state的值，只能调用父组件的方法，从而达到修改state的目的\n  // 这里获得的event为调用这个方法的事件\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl,\n        faceFrame: this.state.faceFrame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/wanegong/Desktop/another frontend/face-recognition/src/App.js"],"names":["React","Component","Clarifai","Navigation","Logo","ImageLinkForm","FaceRecognition","Rank","Particles","app","App","apiKey","particlesOptions","particles","number","density","enable","value_area","constructor","onInputChange","event","console","log","target","value","setState","urlInput","calculateFaceLocation","data","clarifaiFace","top","top_row","left","left_col","right","bottom_row","bottom","right_col","displayFaceFrame","faceFrame","getConcepts","concepts","onButtonSubmit","imageUrl","state","models","initModel","id","FACE_DETECT_MODEL","then","generalModel","predict","response","faceLocation","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Rank from \"./components/Rank/Rank\";\nimport Particles from \"react-particles-js\";\n\nconst app = new Clarifai.App({ apiKey: \"b245f7327c72491f83ffec3cdbfffb85\" });\nconst particlesOptions = {\n  particles: {\n    number: 30,\n    density: {\n      enable: true,\n      value_area: 800,\n    },\n  },\n};\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Particles className=\"particles\" params={particlesOptions} />\n//       <Navigation />\n//       <Logo />\n//       <Rank />\n//       <ImageLinkForm />\n//       {/* <FaceRecognition /> */}\n//     </div>\n//   );\n// }\n\n// 就我理解，需要使用到state这个属性必须要有constructor方法，即要通过class来声明\nclass App extends Component {\n  constructor() {\n    // 要使用this必须要先使用super\n    super();\n    // 设定state，可以让子组件和父组件进行数据互动，有点类似于闭包\n    this.state = {\n      urlInput: \"\",\n      imageUrl: \"\",\n      faceFrame: {},\n      concepts: {},\n    };\n  }\n\n  // 利用箭头函数解决this的指向问题\n  // 设置这个方法是为了改变state里面属性的值，子组件不能直接修改state的值，只能调用父组件的方法，从而达到修改state的目的\n  // 这里获得的event为调用这个方法的事件\n  onInputChange = (event) => {\n    console.log(event.target.value); //调用 事件对象.target.value可以获得输入input的值\n    // 调用这个继承自Component的方法来进行设定属性，不要通过 this.state.urlInput来设置值\n    // 传入参数为一个对象\n    this.setState({ urlInput: event.target.value });\n  };\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\"bounding_box\"];\n    return {\n      // 因为想在inset里面使用百分比，所以在这里先乘以100，再进行返回\n      top: clarifaiFace.top_row * 100,\n      left: clarifaiFace.left_col * 100,\n      right: clarifaiFace.bottom_row * 100,\n      bottom: clarifaiFace.right_col * 100,\n    };\n  };\n  displayFaceFrame = (faceFrame) => {\n    this.setState({ faceFrame: faceFrame });\n    // 可以简单写法\n    // this.setState({ faceFrame })\n  };\n\n  getConcepts = (data) => {\n    const concepts =\n      data[\"outputs\"][0][\"data\"][\"regions\"][0][\"data\"][\"concepts\"][0];\n    this.setState({ concepts: concepts });\n  };\n\n  onButtonSubmit = () => {\n    console.log(\"click\");\n    // 当点击按钮的时候和clarifai的api做交流\n    // 当点击按钮时改变State中imageUrl的值,这个值为输入的url的值\n    this.setState({ imageUrl: this.state.urlInput });\n    app.models\n      .initModel({\n        id: Clarifai.FACE_DETECT_MODEL,\n        // version: \"53e1df302c079b3db8a0a36033ed2d15\",\n      })\n      .then((generalModel) => {\n        return generalModel.predict(this.state.urlInput);\n      })\n      .then((response) => {\n        // 把这一串拿走当作一个方法会比较符合面向对象的语言（我猜）\n        // var concepts =\n        //   response[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\n        //     \"bounding_box\"\n        //   ];\n        this.getConcepts(response);\n        console.log(this.getConcepts(response));\n        console.log(\n          response[\"outputs\"][0][\"data\"][\"regions\"][0][\"region_info\"][\n            \"bounding_box\"\n          ]\n        );\n        console.log(this.calculateFaceLocation(response));\n        return this.calculateFaceLocation(response);\n      })\n      .then((faceLocation) => {\n        this.displayFaceFrame(faceLocation);\n      })\n      .catch((err) => {\n        console.log(\"There are some errors\", err);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particlesOptions} />\n        <Navigation />\n        <Logo />\n        <Rank />\n        {/* 传入属性值，这样子组件可以获取数据，而且可以调用这里的方法 */}\n        {/* 第一个onInputChange为属性名，第二个为属性值，记得要加this，代表的是这个App类的方法 */}\n        <ImageLinkForm\n          onInputChange={this.onInputChange}\n          onButtonSubmit={this.onButtonSubmit}\n        />\n        <FaceRecognition\n          imageUrl={this.state.imageUrl}\n          faceFrame={this.state.faceFrame}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}